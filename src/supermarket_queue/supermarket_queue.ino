/*
   This file is part of supermarket queue ticket.

   Copyright 2020 Fabio Massimo Centonze (hhttps://github.com/fabik111)

   This software is distributed under the licence Creative Commons CC BY-NC-SA
*/

#include "TimeCustom.h"
#include "TimeLib.h"

#include "arduino_secrets.h"

/*
  Sketch generated by the Arduino IoT Cloud Thing "******"
  https://create.arduino.cc/cloud/things/******************************

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  int clientCapacity;
  int stayTime;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include "Adafruit_Thermal.h" //To handle thermal printer
#include "wiring_private.h"

#define PRINTER_TX 2
#define PRINTER_RX 3
#define ECHO_PIN 1 //pin Echo of HC-SR04
#define TRIGGER_PIN 0 //pin Trig of HC-SR04

bool enabled=false;


// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement
int people_per_slot =0;
time_t time_slot = 0;

Uart mySerial (&sercom3, PRINTER_RX, PRINTER_TX, SERCOM_RX_PAD_3, UART_TX_PAD_2);

Adafruit_Thermal printer(&mySerial);     // Pass addr to printer constructor

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);

  pinPeripheral(PRINTER_RX, PIO_SERCOM); //Assign RX function to pin 3
  pinPeripheral(PRINTER_TX, PIO_SERCOM); //Assign TX function to pin 2
  // NOTE: SOME PRINTERS NEED 9600 BAUD instead of 19200, check test page.
  //TO TEST
  //mySerial.begin(19200);  // Initialize Print serial
  //printer.begin();        // Init printer
  //END TO TEST
  pinMode(TRIGGER_PIN, OUTPUT); // Sets the TRIGGER_PIN as an OUTPUT
  pinMode(ECHO_PIN, INPUT); // Sets the ECHO_PIN as an INPUT
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();


}
unsigned long tf=0;

void loop() {
  ArduinoCloud.update();
  unsigned long current = millis();
  //Check every 2 seconds the presence of a client
  if((current-tf)> 2000){
    //HC-SR04 logic
    // Clears the TRIGGER_PIN condition
    digitalWrite(TRIGGER_PIN, LOW);
    delayMicroseconds(2);
    // Sets the TRIGGER_PIN HIGH (ACTIVE) for 10 microseconds
    digitalWrite(TRIGGER_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIGGER_PIN, LOW);
    // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
    duration = pulseIn(ECHO_PIN, HIGH);
    // Calculating the distance
    distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
    //run print ticket logic if client is near 20cm
    if(distance < 20){
      if(!enabled){
        if(time_slot==0){ //init time_slot when we are sure connection is established
          time_slot= (time_t) time_service.getTime();
        }
        clientCapacity = clientCapacity == 0 ? 2: clientCapacity;
        //check if time slot is full
        if(people_per_slot<clientCapacity){
          printTicket(time_slot);
          people_per_slot++; //update client counter
        }else{
          stayTime = stayTime == 0 ? 20: stayTime;
          time_slot = time_slot + (60*stayTime); //set a new timeslot
          printTicket(time_slot);
          people_per_slot=1; //reset counter
        }
        enabled=true;
      }
    }else{
      if(enabled){
        enabled=false; //set client leaved
      }
    }

    tf = current;
  }


}

void printTicket(time_t ts){
  Serial.print("your turn is: ");
  Serial.print(hour(ts));
  Serial.print(":");
  Serial.print(minute(ts));
  Serial.print(":");
  Serial.print(second(ts));
  Serial.print(" ");
  Serial.print(day(ts));
  Serial.print(" ");
  Serial.print(month(ts));
  Serial.print(" ");
  Serial.print(year(ts));
  Serial.println();

  //TO TEST
  /*printer.print("your turn is: ");
  printer.print(hour(ts));
  printer.print(":");
  printer.print(minute(ts));
  printer.print(":");
  printer.print(second(ts));
  printer.print(" ");
  printer.print(day(ts));
  printer.print(" ");
  printer.print(month(ts));
  printer.print(" ");
  printer.print(year(ts));
  printer.println();*/
}

void onStayTimeChange() {
  // Do something
}


void onClientCapacityChange() {
  // Do something
}
